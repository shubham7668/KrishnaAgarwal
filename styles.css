body {
    padding: 20px;
    font-family: 'Lato', sans-serif;
    font-size: 17px;
}
.header {
    text-align: center;
}
.header-active {
    background-color: #eeeeee;
}
@media screen and (max-width: 516px) {
  .pure-menu-list {
    display: flex !important;
    flex-wrap: wrap !important;
    flex-direction: column !important;
    align-items: center;
  }
  .pure-menu-item {
    margin: 5px 0 0 0;
  }
}

.profile {
    width: 150px;
}
.profile-name {
    margin-top: 5px;
    font-size: 36px;
}
.content {
    max-width: 700px;
    margin: 30px auto 0 auto;
}
p {
    font-size: 17px;
    line-height: 1.5;
    text-align: justify;
}
.links {
    text-decoration: none;
    color: black;
    background-image: linear-gradient(transparent 0%, transparent calc(50% - 9px), rgba(0, 255, 0, 0.35) calc(50% - 9px), rgba(0, 255, 0, 0.35) 100%);
    transition: background-position 120ms ease-in-out 0s, padding 120ms ease-in-out 0s;
    background-size: 100% 220%;
    background-position: 0px 0px;
}
.links:hover {
    color: black;
    background-image: linear-gradient(transparent 0%, transparent calc(50% - 9px), #00ff6c calc(50% - 9px), #00ff6c 100%);
    background-position: 0px 100%;
}
h1 {
    font-size: 28px;
}
li{
    text-align: justify;
    margin-top: 0.7em;
}

.faicon {
    color: black;
    font-size: 25px;
}
.faicon:hover {
    color: #bb8f0a;
}

/*Experience*/
.collapse {
    border-radius: 8px;
    overflow: hidden;
}
.collapse .tab {
    margin: 0;
}
.collapse .tab-toggle {
    display: none;
}
.collapse .tab-label {
    display: flex;
    justify-content: space-between;
    padding: 0.6em;
    margin-top: 0.5em;
    border-radius: 8px;
    border: 2px solid lightgrey;
    margin-bottom: 0.8em;
}
.collapse .tab-label:hover {
    background-color: #eddfe6;
}
.collapse .tab-toggle:checked ~.tab-label {
    /*background-color: #eddab4;*/
}
.collapse .tab-label::after {
    /*content: '\276F';*/
    content: '\002B';
    transition: all .4s;
}
.collapse .tab-toggle:checked ~ .tab-label::after {
    /*transform: rotate(90deg);*/
    content: '\002D';
}
.collapse .tab-content {
    background-color: white;
    max-height: 0px;
    overflow: hidden;
    transition: all .4s;
    padding: 0 1em;
}
.collapse .tab-toggle:checked ~ .tab-content {
    max-height: 200vh;
    padding: 0.2em;
}

/*Resume*/
.resume-container, .cards-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0 0 0;
}
.button {
    color: #000;
    text-align: center;
    padding: 10px;
    width: 160px;
    border: 1px solid black;
    border-radius: 10px;
    text-decoration: none;
}
.button:hover {
    color: #220ff5;
    border: 2px dotted #220ff5;
}

/*Cards*/
.container {
    display: flex;
    flex-wrap: wrap;
    text-align: center;
}
.card {
    width: 110px;
    height: 160px;
    margin: 10px;
    padding: 20px 20px 0 20px; 
    border: 2px solid lightgrey;
    border-radius: 10px;
}
.card:hover {
    /*box-shadow: 5px 5px 4px #888888;*/
    -webkit-box-shadow:  2px 4px 21px 0px rgba(148,133,148,0.75);
    -moz-box-shadow:  2px 4px 21px 0px rgba(148,133,148,0.75);
    box-shadow:  2px 4px 21px 0px rgba(148,133,148,0.75);
}
.card .row {
    margin-top: -5px;
}

/*Works*/
.works-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}
.img-links {
    color: white;
    border: 1px solid lightgrey;
    margin: 5px;
    border-radius: 10px;
    overflow: hidden;
}
.img-links:hover {
    text-decoration: none;
}
.works {
    width: 300px;
    height: 180px;
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    display: flex;
    flex-wrap: wrap;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.works:hover {
    opacity: 0.55;
    -webkit-transform: scale(1.2, 1.2); 
    transform: scale(1.2, 1.2);
    -webkit-transition: all 0.3s ease-in-out;
}
.works-link {
    opacity: 1;
    font-size: 40px;
    position: relative;
    top: -30px;
    color: #bb8f0a;
}
.website {
    background-color: #ed3948;
    color: white;
    font-size: 20px;
    font-weight: bold;
    border: 1px solid lightgrey;
    border-radius: 10px;
    padding: 5px 5px 0 5px;
    position: relative;
    top: -45px;
}

// Particle effect
(function(){
    let canvas = document.querySelector("#canvas");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    let ctx = canvas.getContext("2d");

    let TAU = 2 * Math.PI;

    times = [];
    function loop() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        update();
        draw();
        requestAnimationFrame(loop);
    }

    class Ball {
        constructor(startX, startY, startVelX, startVelY) {
            this.x = startX || Math.random() * canvas.width;
            this.y = startY || Math.random() * canvas.height;
            this.vel = {
                x: startVelX || Math.random() * 2 - 1,
                y: startVelY || Math.random() * 2 - 1
            };
            this.update = function (canvas) {
                if (this.x > canvas.width + 50 || this.x < -50) {
                    this.vel.x = -this.vel.x;
                }
                if (this.y > canvas.height + 50 || this.y < -50) {
                    this.vel.y = -this.vel.y;
                }
                this.x += this.vel.x;
                this.y += this.vel.y;
            };
            this.draw = function (ctx, can) {
                ctx.beginPath();
                let distM = distMouse(this);
                if (distM > 200) {
                    ctx.fillStyle = "#050606";
                    ctx.globalAlpha = .2;
                }
                else {
                    ctx.fillStyle = '#3FABEF';
                    ctx.globalAlpha = 1 - distM / 240;
                }
                ctx.arc((0.5 + this.x) | 0, (0.5 + this.y) | 0, 4, 0, TAU, false);
                ctx.fill();
            };
        }
    }

    let balls = [];
    for (let i = 0; i < canvas.width * canvas.height / (105*105); i++) {
        balls.push(new Ball(Math.random() * canvas.width, Math.random() * canvas.height));
    }

    let lastTime = Date.now();
    function update() {
        let diff = Date.now() - lastTime;
        for (let frame = 0; frame * 16.6667 < diff; frame++) {
            for (let index = 0; index < balls.length; index++) {
            balls[index].update(canvas);
            }
        }
        lastTime = Date.now();
    }
    let mouseX = -1e9, mouseY = -1e9;
    document.addEventListener('mousemove', function(event) {
        mouseX = event.clientX;
        mouseY = event.clientY;
    });

    function distMouse(ball) {
        return Math.hypot(ball.x - mouseX, ball.y - mouseY);
    }

    function draw() {
        for (let index = 0; index < balls.length; index++) {
            let ball = balls[index];
            ctx.beginPath();
            for (let index2 = balls.length - 1; index2 > index; index2 += -1) {
                let ball2 = balls[index2];
                let dist = Math.hypot(ball.x - ball2.x, ball.y - ball2.y);
                if (dist < 100) {
                    let distM = distMouse(ball2);
                    if (distM > 150) {
                        ctx.strokeStyle = "#8f9aa3";
                        ctx.globalAlpha = .2;
                    } else {
                        ctx.globalAlpha = 0;
                    }
                    ctx.moveTo((0.5 + ball.x) | 0, (0.5 + ball.y) | 0);
                    ctx.lineTo((0.5 + ball2.x) | 0, (0.5 + ball2.y) | 0);
                }
            }
            ctx.stroke();
            ball.draw(ctx, canvas);
        }
    }

    // Start
    loop();
})();
